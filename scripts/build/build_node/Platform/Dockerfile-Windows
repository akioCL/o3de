#FROM mcr.microsoft.com/windows/servercore:ltsc2019
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019

# SHELL ["powershell", "-command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install Chocolatey package manager
ENV ChocolateyUseWindowsCompression false
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex
RUN choco feature enable -n=allowGlobalConfirmation

# Install latest powershell (7.0.2)
RUN choco install -f powershell-core

# Set powershell 7 as default for every subsequent command
SHELL ["pwsh", "-command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install dependancies
RUN choco install -f 7zip
RUN choco install -f windirstat
RUN choco install -f --ignore-checksums sysinternals

# Install source control apps 
RUN choco install -f git
RUN choco install -f git-lfs

# Install Java (for Jenkins)
# Custom directory to handle cases where whitespace in the path is not quote wrapped
RUN choco install -f corretto8jdk --ia INSTALLDIR="c:\jdk8"

# Install CMake
RUN choco install -f cmake --installargs 'ADD_CMAKE_TO_PATH=System'

# NuGet
RUN choco install -fy nuget.commandline

# Copy all script files
COPY Windows /
COPY Common /

# Install Visual Studio Build Tools with MSVC workload
# RUN ["choco", "install", "visualstudio2019buildtools", "--package-parameters", "\"--config c:\temp\vs2019bt.vsconfig \""]
# RUN choco install visualstudio2019buildtools --package-parameters "\"--config .\vs2019bt.vsconfig\""

# RUN ["choco", "install", "visualstudio2017buildtools", "--package-parameters", "'--config C:\\temp\\vs2017bt.vsconfig'"]

# Download the Build Tools bootstrapper.
RUN curl -SL --output vs_buildtools.exe https://aka.ms/vs/16/release/vs_buildtools.exe

# Restore the default Windows shell for correct batch processing.
# SHELL ["cmd", "/S", "/C"]

# Install Build Tools with the Microsoft.VisualStudio.Workload.AzureBuildTools workload, excluding workloads and components with known issues.
RUN cmd /c "vs_buildtools.exe --quiet --wait --norestart --nocache modify --installPath "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\BuildTools" --config vs2019bt.vsconfig || IF "%ERRORLEVEL%"=="3010" EXIT 0 && del /q vs_buildtools.exe"

# Install Windows 10 SDK (Not part of the VS tools)
RUN choco install windows-sdk-10.1

# Install Windows Installer XML toolkit (WiX)
RUN choco install -f wixtoolset

# Install Python and associated dependancies
RUN choco install -f python3
RUN pip3 install -r requirements.txt

RUN mkdir -p C:\ProgramData\AWSCodeBuild\bin ; mkdir -p C:\ProgramData\AWSCodeBuild\features

# F# support
RUN choco install -f visualfsharptools

# Portable Library support
RUN choco install -f netfx-pcl-reference-assemblies-4.6

# Configure SSH
#COPY ssh_config /Users/ContainerAdministrator/.ssh/config

# Set longpath in registry
RUN Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -value 1

# Disable Admin prompts
RUN New-ItemProperty -Path HKLM:Software\Microsoft\Windows\CurrentVersion\policies\system -Name EnableLUA -PropertyType DWord -Value 0 -Force
RUN New-ItemProperty -Path HKLM:Software\Microsoft\Windows\CurrentVersion\policies\system -Name ConsentPromptBehaviorAdmin -PropertyType DWord -Value 0 -Force

# Reload environment variables system file
RUN refreshenv

# Define the entry point for the docker container.
# This entry point starts the developer command prompt and launches the PowerShell shell.
ENTRYPOINT ["C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\Common7\\Tools\\VsDevCmd.bat", "&&", "powershell.exe", "-NoLogo", "-ExecutionPolicy", "Bypass"]