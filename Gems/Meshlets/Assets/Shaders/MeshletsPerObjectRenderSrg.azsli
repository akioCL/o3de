/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <scenesrg.srgi>

ShaderResourceGroup MeshletsObjectRenderSrg : SRG_PerObject
{
    // used for instancing and matrix retrieval
    uint m_objectId;

    // vertex streams 
    Buffer<float3> m_positions;
    Buffer<float3> m_normals;
    Buffer<float4> m_tangents; 
    Buffer<float3> m_bitangents; 
    Buffer<float2> m_uvs;

    //! Returns the matrix for transforming points from Object Space to World Space.
    float4x4 GetWorldMatrix()
    {
        return SceneSrg::GetObjectToWorldMatrix(m_objectId);
    }

    //! Returns the inverse-transpose of the world matrix.
    //! Commonly used to transform normals while supporting non-uniform scale.
    float3x3 GetWorldMatrixInverseTranspose()
    {
        return SceneSrg::GetObjectToWorldInverseTransposeMatrix(m_objectId);
    }

    float3 GetPosition(uint vertexIndex)
    {
        return m_positions[vertexIndex];
    }

    float3 GetNormal(uint vertexIndex)
    {
        return m_normals[vertexIndex];
    }

    // The last element of the tangents indicates face direction / winding
    float4 GetTangent(uint vertexIndex)
    {
        return m_tangents[vertexIndex];
    }

    float3 GetBiTangent(uint vertexIndex)
    {
        return m_bitangents[vertexIndex];
    }

    float2 GetUV(uint vertexIndex)
    {
        return m_uvs[vertexIndex];
    }
}
