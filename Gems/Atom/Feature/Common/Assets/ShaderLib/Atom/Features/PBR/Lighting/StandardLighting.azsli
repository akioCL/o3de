/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// Include options first
#include <Atom/Features/PBR/LightingOptions.azsli>

// Then include custom surface and lighting data types
#include <Atom/Features/PBR/Lighting/LightingData.azsli>
#include <Atom/Features/PBR/Surfaces/StandardSurface.azsli>

#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Brdf.azsli>

// Then define the Diffuse and Specular lighting functions
float3 GetDiffuseLighting(Surface surface, LightingData lightingData, float3 lightIntensity, float3 dirToLight)
{
    float3 diffuse = DiffuseLambertian(surface.albedo, surface.normal, dirToLight, lightingData.diffuseResponse);

    if(o_clearCoat_feature_enabled)
    {
        // Attenuate diffuse term by clear coat's fresnel term to account for energy loss
        float HdotV = saturate(dot(normalize(dirToLight + lightingData.dirToCamera), lightingData.dirToCamera));
        diffuse *= 1.0 - (FresnelSchlick(HdotV, 0.04) * surface.clearCoat.factor);
    }
    
    diffuse *= lightIntensity;
    return diffuse;
}

float3 GetSpecularLighting(Surface surface, LightingData lightingData, const float3 lightIntensity, const float3 dirToLight)
{
    float3 specular = SpecularGGX(lightingData.dirToCamera, dirToLight, surface.normal, surface.specularF0, lightingData.NdotV, surface.roughnessA2, lightingData.multiScatterCompensation);

    if(o_clearCoat_feature_enabled)
    {
        float3 halfVector = normalize(dirToLight + lightingData.dirToCamera);
        float NdotH = saturate(dot(surface.clearCoat.normal, halfVector));
        float NdotL = saturate(dot(surface.clearCoat.normal, dirToLight));
        float HdotL = saturate(dot(halfVector, dirToLight));

        // HdotV = HdotL due to the definition of half vector
        float3 clearCoatF = FresnelSchlick(HdotL, 0.04) * surface.clearCoat.factor;
        float clearCoatRoughness = max(surface.clearCoat.roughness * surface.clearCoat.roughness, 0.0005f);
        float3 clearCoatSpecular = ClearCoatGGX(NdotH, HdotL, NdotL, surface.clearCoat.normal, clearCoatRoughness, clearCoatF );

        specular = specular * (1.0 - clearCoatF) * (1.0 - clearCoatF) + clearCoatSpecular;
    }
    
    specular *= lightIntensity;
    
    return specular;
}

//! Simple Lambertian BRDF. 
half3 DiffuseLambertianHalf(
    half3 albedo, 
    half3 normal, 
    half3 dirToLight, 
    half diffuseResponse)
{
    half NdotL = saturate(dot(normal, dirToLight));
    return albedo * NdotL * 0.31830988h * diffuseResponse;
}

// Then define the Diffuse and Specular lighting functions
half3 GetDiffuseLightingHalf(
    Surface surface, 
    LightingData lightingData, 
    half3 lightIntensity, 
    half3 dirToLight)
{
    half3 albedoHalf = surface.albedo.xyz;
    half3 normalHalf = surface.normal.xyz;
    half3 dirToLightHalf = dirToLight.xyz;
    half diffuseResponseHalf = lightingData.diffuseResponse.x;

    half3 diffuse = DiffuseLambertianHalf(albedoHalf, normalHalf, dirToLightHalf, diffuseResponseHalf);

    diffuse *= lightIntensity;
    return diffuse;
}

half3 FresnelSchlickHalf(
    const half HdotV, 
    const half3 F0)
{
    return FresnelSchlickF90Half(HdotV, F0, 1.0h);
}

half3 FresnelSchlickWithRoughnessHalf(
    const half NdotV, 
    const half3 specularF0, 
    const half roughness)
{
    half smoothness = 1.0h - roughness;
    half3 F0 = specularF0;

    return F0 + (max(smoothness, F0) - F0) * pow(1.0h - saturate(NdotV), 5.0h);
}

half GeometricShadowingMaskingGGXCorrelatedHalf(
    const half NdotV, 
    const half NdotL, 
    const half roughnessA2)
{
    // See Frostbite PBR guide (page 12)
    // https://media.contentapi.ea.com/content/dam/eacom/frostbite/files/course-notes-moving-frostbite-to-pbr-v32.pdf
    half ggxV = NdotL * sqrt((-NdotV * roughnessA2 + NdotV) * NdotV + roughnessA2);
    half ggxL = NdotV * sqrt((-NdotL * roughnessA2 + NdotL) * NdotL + roughnessA2);
    return 0.5h / max(ggxV + ggxL, 1e-4h);
}

half NormalDistributionGGXHalf(
    const float NdotH, 
    const float roughnessA2)
{
    // Walter equation 33, simplified given that the positive characteristic function is handled elsewhere
    float b = (NdotH * roughnessA2 - NdotH) * NdotH + 1.0f;
    return roughnessA2 / (3.14159f * b * b);
}

half3 SpecularGGXHalf( 
    float3 dirToCamera, 
    half3 dirToLight, 
    half3 normal, 
    half3 specularF0, 
    half NdotV, 
    half roughnessA2, 
    half3 multiScatterCompensation )
{
    float3 halfVector = normalize(float3(dirToLight + dirToCamera));
    float NdotH = saturate(dot(float3(normal), halfVector));
    half NdotL = saturate(dot(normal, dirToLight));
    half HdotV = saturate(dot(half3(halfVector), dirToCamera)); // Note that HdotL = HdotV, so we don't need to calculate both

    // D, G and F from the lighting equation
    // Note: the division by (4.0 * NdotL * NdotV) is already factored out in the G function as an optimization
    half D = half(NormalDistributionGGXHalf(NdotH, float(roughnessA2)));
    half G = GeometricShadowingMaskingGGXCorrelatedHalf(NdotV, NdotL, roughnessA2);
    half3 F = FresnelSchlickHalf(HdotV, specularF0);

    D = max(0.0h, D);
    G = max(0.0h, G);

    // Multiply with multiscattering compensation in order to take account for several specular light bounces.
    return multiScatterCompensation * (D * G * F * NdotL);
}


half3 GetSpecularLightingHalf(Surface surface, LightingData lightingData, const half3 lightIntensity, const half3 dirToLight)
{
    half3 specular = SpecularGGXHalf(lightingData.dirToCamera, dirToLight, surface.normal, surface.specularF0, lightingData.NdotV, surface.roughnessA2, lightingData.multiScatterCompensation);
    specular *= lightIntensity;
    
    return specular;
}


// Then include everything else
#include <Atom/Features/PBR/Lights/Lights.azsli>
#include <Atom/Features/PBR/Lights/Ibl.azsli>


struct PbrLightingOutput
{
    float4 m_diffuseColor;
    float4 m_specularColor;
    float4 m_albedo;
    float4 m_specularF0;
    float4 m_normal;
};

struct PbrLightingOutputHalf
{
    half4 m_diffuseColor;
    half4 m_specularColor;
    half4 m_albedo;
    half4 m_specularF0;
    half4 m_normal;
};


PbrLightingOutput GetPbrLightingOutput(Surface surface, LightingData lightingData, float alpha)
{
    PbrLightingOutput lightingOutput;

    lightingOutput.m_diffuseColor = float4(lightingData.diffuseLighting, alpha);
    lightingOutput.m_specularColor = float4(lightingData.specularLighting, 1.0);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = float4(surface.specularF0, surface.roughnessLinear);
    lightingOutput.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    lightingOutput.m_albedo.a = lightingData.specularOcclusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    lightingOutput.m_normal.a = o_specularF0_enableMultiScatterCompensation ? 1.0f : 0.0f;
    
    return lightingOutput;
}

PbrLightingOutputHalf GetPbrLightingOutputHalf(Surface surface, LightingData lightingData, half alpha)
{
    PbrLightingOutputHalf lightingOutput;

    lightingOutput.m_diffuseColor = half4(lightingData.diffuseLighting, alpha);
    lightingOutput.m_specularColor = half4(lightingData.specularLighting, 1.0h);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = half4(surface.specularF0, surface.roughnessLinear);
    lightingOutput.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    lightingOutput.m_albedo.a = lightingData.specularOcclusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(float3(surface.normal));
    lightingOutput.m_normal.a = o_specularF0_enableMultiScatterCompensation ? 1.0h : 0.0h;
    
    return lightingOutput;
}

PbrLightingOutput DebugOutput(float3 color)
{
    PbrLightingOutput output = (PbrLightingOutput)0;

    float defaultNormal = float3(0.0f, 0.0f, 1.0f);

    output.m_diffuseColor = float4(color.rgb, 1.0f);
    output.m_normal.rgb = EncodeNormalSignedOctahedron(defaultNormal);

    return output;
}
