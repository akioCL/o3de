/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/RPI/Math.azsli>

#include <Atom/Features/SrgSemantics.azsli>

#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>

#include <Atom/Features/PostProcessing/Aces.azsli>
#include <Atom/Features/PostProcessing/Shapers.azsli>

float3 convert2Dto3DLutCoords(float2 uv, float width, float height)
{
    // convert from center pixel uvs to [0,1]
    float offset = 1.0/height/2.0;
    float scale = 1.0 - offset*2.0;

    float2 adjustedUv = float2(uv.x * width, uv.y * height);
    float3 coords = float3(adjustedUv.x%height, 0.5 + int(adjustedUv.x/height), adjustedUv.y)/height;
    return (coords - offset)/scale;
}

half3 convert2Dto3DLutCoordsHalf(
    half2 uv, 
    half width, 
    half height)
{
    // convert from center pixel uvs to [0,1]
    half offset = 1.0h/height/2.0h;
    half scale = 1.0h- offset*2.0h;

    half2 adjustedUv = half2(uv.x * width, uv.y * height);
    half3 coords = half3(adjustedUv.x%height, 0.5h + int(adjustedUv.x/height), adjustedUv.y)/height;
    return (coords - offset)/scale;
}

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    // framebuffer sampler
    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    int m_lutResolution;
    int m_shaperType;
    float m_shaperBias;
    float m_shaperScale;

    float m_colorAdjustmentWeight;
    float m_colorGradingExposure;
    float m_colorGradingContrast;
    float m_colorGradingPreSaturation;
    float m_colorFilterIntensity;
    float m_colorFilterMultiply;
    float4 m_colorFilterSwatch;

    float m_whiteBalanceWeight;
    float m_whiteBalanceKelvin;
    float m_whiteBalanceTint;
    float m_whiteBalanceLuminancePreservation;

    float m_splitToneBalance;
    float m_splitToneWeight;
    float4 m_splitToneShadowsColor;
    float4 m_splitToneHighlightsColor;

    float m_smhShadowsStart;
    float m_smhShadowsEnd;
    float m_smhHighlightsStart;
    float m_smhHighlightsEnd;
    float m_smhWeight;
    float4 m_smhShadowsColor;
    float4 m_smhMidtonesColor;
    float4 m_smhHighlightsColor;

    float3 m_channelMixingRed;
    float3 m_channelMixingGreen;
    float3 m_channelMixingBlue;

    float m_finalAdjustmentWeight;
    float m_colorGradingPostSaturation;
    float m_colorGradingHueShift;
}

#include <Atom/Features/PostProcessing/HDRColorGradingCommon.azsl>

struct PSOutput
{
    float4 m_lutOutput : SV_Target0;
};

PSOutput MainPS(VSOutput IN)
{
    ShaperType shaperType = (ShaperType)PassSrg::m_shaperType;
    int lutResolution = PassSrg::m_lutResolution;

    PSOutput OUT;

    // baseCoords are from 0-1
    half3 baseCoords = convert2Dto3DLutCoordsHalf(IN.m_texCoord, lutResolution*lutResolution, lutResolution);

    half3 linearColor = ShaperToLinearHalf(
        baseCoords, 
        shaperType, 
        half(PassSrg::m_shaperBias), 
        half(PassSrg::m_shaperScale));

    linearColor = TransformColorHalf(
        linearColor, 
        ColorSpaceId::LinearSRGB, 
        ColorSpaceId::ACEScg);
    half3 gradedColor = ColorGradeHalf(linearColor);
    gradedColor = TransformColorHalf(gradedColor, ColorSpaceId::ACEScg, ColorSpaceId::LinearSRGB);

    // Bring back coordinates into 0-1
    half3 shapedColor = LinearToShaperHalf(gradedColor, shaperType, half(PassSrg::m_shaperBias), half(PassSrg::m_shaperScale));
    shapedColor = saturate(shapedColor);

    OUT.m_lutOutput = float4(float3(shapedColor), 1.0f);
    return OUT;
}
