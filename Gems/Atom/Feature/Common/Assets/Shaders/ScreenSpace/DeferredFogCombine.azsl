#include <Atom/RPI/Math.azsli>

#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
/* #include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli> */
#include <Atom/Features/ScreenSpace/ScreenSpaceUtil.azsli>

#include <scenesrg.srgi>

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    Texture3D<float4> m_fogCDF;
    Texture2D<float2> m_depthStencilTexture;

    float3 m_fogColor;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler DepthSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
};

struct PSOutput
{
    float4 m_color : SV_Target0;
    float4 m_debug : SV_Target1;
};


#include "DeferredFog_Common.azsli"

PSOutput MainPS(VSOutput IN)
{
    // Sample depth and convert to a Z coordinate into the fog texture
    const float depth = PassSrg::m_depthStencilTexture.Sample(PassSrg::DepthSampler, IN.m_texCoord).r;
    const float fogTexZCoord = LinearDepthToFogVolumeTexZ(depth);

    // Sample fog CDF
    const float4 col = PassSrg::m_fogCDF.Sample(PassSrg::LinearSampler, float3(IN.m_texCoord, fogTexZCoord));

    PSOutput OUT;
    // OUT.m_color = float4(PassSrg::m_fogColor, 1.0);
    OUT.m_color = col;

    return OUT;
};
