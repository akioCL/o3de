/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <viewsrg.srgi>
#include <scenesrg.srgi>

ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    //! Id of this draw object for retrieval of transformation matrices.
    uint m_objectId;

    //! Id to fill the mask with for this draw object.
    uint m_maskId;

    //! Returns the matrix for transforming points from Object Space to World Space.
    float4x4 GetWorldMatrix()
    {
        return SceneSrg::GetObjectToWorldMatrix(m_objectId);
    }

    //! The non-linear depth buffer data for fragments in the color buffer.
    Texture2D<float> m_depth;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
}

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    // "centroid" is needed for SV_Depth to compile
    precise linear centroid float4 m_position : SV_Position;

    float2 m_uv : UV0;
    float m_depth : UV1;
};

VSOutput MainVS(VSInput IN)
{
    VSOutput OUT;    
    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
    float3 directionToCamera = normalize(ViewSrg::m_worldPosition.xyz - worldPosition.xyz);
    float offsetScale = dot(IN.m_normal, directionToCamera);
    offsetScale = 1.0f / max(offsetScale, 0.01);
    offsetScale *= 0.001f;   // Adjust this value to be as small as possible without producing too many artifacts
    worldPosition += directionToCamera * offsetScale;
    
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));

    // Offset the depth of redrawn entities to avoid z fighting with the underlying entity rendered data
    // A proper programatic solution will be investigated in LYN-10304
    //OUT.m_position.z += 0.001;

    // NDCs
    float3 ndc = float3(OUT.m_position.x / OUT.m_position.w, OUT.m_position. y/ OUT.m_position.w, OUT.m_position.z / OUT.m_position.w);

    // Normalized screenspace UVs
    OUT.m_uv = float2((ndc.x + 1.0) * 0.5, (ndc.y + 1.0) * 0.5);

    // Fragment depth
    OUT.m_depth = ndc.z;

    return OUT;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput MainPS(VSOutput IN)
{
    PixelOutput OUT;
//
    // Ignore m_maskId for now until LYN-9878 is resolved
    OUT.m_color = float4(1., 1., 1., 1.);
    //const float newDepth = IN.m_depth;
    //const float existingDepth = ObjectSrg::m_depth.Sample(ObjectSrg::LinearSampler, IN.m_uv).r;
    //
    //const float o = existingDepth;
    //OUT.m_color.rgb = float4(o,o,o,1.);

    return OUT;
} 