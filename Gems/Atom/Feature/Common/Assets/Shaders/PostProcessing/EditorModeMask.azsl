/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>

#include <viewsrg.srgi>
#include <scenesrg.srgi>

ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    //! Id of this draw object for retrieval of transformation matrices.
    uint m_objectId;

    //! Id to fill the mask with for this draw object.
    uint m_maskId;

    //! Returns the matrix for transforming points from Object Space to World Space.
    float4x4 GetWorldMatrix()
    {
        return SceneSrg::GetObjectToWorldMatrix(m_objectId);
    }
}

ShaderResourceGroup PassSrg : SRG_PerPass
{
    //! The non-linear depth buffer data for fragments in the color buffer.
    Texture2D<float> m_depthLinear;
    float4 m_depthLinearDimensions; // xy is width and height, zw is 1/width and 1/height

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

}

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;

};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    // "centroid" is needed for SV_Depth to compile
    precise linear centroid float4 m_position : SV_Position;
    float m_depth : UV0;
};

VSOutput MainVS(VSInput IN)
{
    VSOutput OUT;    
    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;

    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));
    
    // Offset the depth of redrawn entities to avoid z fighting with the underlying entity rendered data
    // A proper programatic solution will be investigated in LYN-10304
    //OUT.m_position.z *= 1.001;

    //OUT.m_position.z += 0.001;

    /*/

    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));

    // Offset the depth of redrawn entities to avoid z fighting with the underlying entity rendered data
    // A proper programatic solution will be investigated in LYN-10304

    //*/


/*
    For use in LYN-9929
*/

    // NDCs
    float3 ndc = float3(OUT.m_position.x / OUT.m_position.w, OUT.m_position. y/ OUT.m_position.w, OUT.m_position.z / OUT.m_position.w);

    // Normalized screenspace UVs
    float2 uv = float2((ndc.x + 1.0) * 0.5, (ndc.y + 1.0) * 0.5);

    // Fragment depth
    OUT.m_depth = ndc.z;// * 0.5 + 0.5;
    return OUT;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput MainPS(VSOutput IN)
{
    PixelOutput OUT;

    // Ignore m_maskId for now until LYN-9878 is resolved

    // Get Linear Depth
    float2 screenUV = IN.m_position.xy * PassSrg::m_depthLinearDimensions.zw;
    float existingLinearDepth = PassSrg::m_depthLinear.Sample(PassSrg::LinearSampler, screenUV).r;
    float newLinearDepth = IN.m_depth;

    existingLinearDepth = abs(((ViewSrg::GetFarZTimesNearZ()) / (ViewSrg::GetFarZMinusNearZ() * existingLinearDepth - ViewSrg::GetFarZ()))); 
    newLinearDepth = abs(((ViewSrg::GetFarZTimesNearZ()) / (ViewSrg::GetFarZMinusNearZ() * newLinearDepth - ViewSrg::GetFarZ()))); 


    OUT.m_color.a = 1.0;
    OUT.m_color.g = 1.;
    OUT.m_color.r =0.0;
    if((newLinearDepth - existingLinearDepth) <= 0.05)
    {
        OUT.m_color.r =1.0;
    }
    //existingLinearDepth *= 0.05;
    //newLinearDepth *= 0.05;

    //OUT.m_color.r = 1.;//float4(1., 1., 1., 1.);
    // Output Linear Depth
    // OUT.m_color.rgb = existingLinearDepth.rrr;
    

    return OUT;
} 