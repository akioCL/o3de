/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#include <Atom/Features/SrgSemantics.azsli>

#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
#include <Atom/Features/PostProcessing/PostProcessUtil.azsli>
#include <Atom/Features/PostProcessing/PostProcessUtil.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    //! The entity mask containing the visible fragments of entities of interest.
    Texture2DMS<float4> m_entityMaskMSAA;
}

struct PSOutput
{
    float4 m_entityMask : SV_Target0;
};

PSOutput MainPS(VSOutput IN)
{
    uint width = 0;
    uint height = 0;
    uint numberOfSamples = 0;
    PassSrg::m_entityMaskMSAA.GetDimensions(width, height, numberOfSamples);

    int2 coord = int2(width * IN.m_texCoord.x, height * IN.m_texCoord.y);

    PSOutput OUT;
  
    //int sampleIndex = 0;
    //OUT.m_entityMask = PassSrg::m_entityMaskMSAA.Load(coord, sampleIndex);
    // Accumulate sub-pixels
    float4 color = float4(0, 0, 0, 0);

    for (uint i = 0; i < numberOfSamples; ++i)
    {
        // Get sub-pixel i
        float4 sampleColor = PassSrg::m_entityMaskMSAA.Load(coord, i);

        // Accumulate sample
        color += sampleColor;
    }

    // Sample normalization and inverse tone mapping
    color = color / float(numberOfSamples);

    OUT.m_entityMask = color;

    return OUT;
}