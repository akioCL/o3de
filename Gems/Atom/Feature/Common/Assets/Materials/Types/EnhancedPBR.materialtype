{
    "description": "Material Type with properties used to define Enhanced PBR, a metallic-roughness Physically-Based Rendering (PBR) material shading model, with advanced features like subsurface scattering, transmission, and anisotropy.",
    "propertyLayout": {
        "version": 3,
        "propertySets": [
            {
                "$import":  "MaterialInputs\\BaseColorProperties.json"
            },
            {
                "$import":  "MaterialInputs/MetallicProperties.json"
            },
            {
                "$import":  "MaterialInputs/RoughnessProperties.json"
            },
            {
                "$import":  "MaterialInputs/SpecularProperties.json"
            },
            {
                "$import":  "MaterialInputs/NormalProperties.json"
            },
            {
                "$import":  "MaterialInputs/DetailMapProperties.json"
            },
            {
                "name": "detailUV",
                "displayName": "Detail Layer UV",
                "description": "Properties for modifying detail layer UV.",
                "properties": [
                    {
                        "name": "center",
                        "displayName": "Center",
                        "description": "Center point for scaling and rotation transformations.",
                        "type": "vector2",
                        "vectorLabels": [ "U", "V" ],
                        "defaultValue": [ 0.5, 0.5 ]
                    },
                    {
                        "name": "tileU",
                        "displayName": "Tile U",
                        "description": "Scales texture coordinates in V.",
                        "type": "float",
                        "defaultValue": 1.0,
                        "step": 0.1
                    },
                    {
                        "name": "tileV",
                        "displayName": "Tile V",
                        "description": "Scales texture coordinates in V.",
                        "type": "float",
                        "defaultValue": 1.0,
                        "step": 0.1
                    },
                    {
                        "name": "offsetU",
                        "displayName": "Offset U",
                        "description": "Offsets texture coordinates in the U direction.",
                        "type": "float",
                        "defaultValue": 0.0,
                        "min": -1.0,
                        "max": 1.0
                    },
                    {
                        "name": "offsetV",
                        "displayName": "Offset V",
                        "description": "Offsets texture coordinates in the V direction.",
                        "type": "float",
                        "defaultValue": 0.0,
                        "min": -1.0,
                        "max": 1.0
                    },
                    {
                        "name": "rotateDegrees",
                        "displayName": "Rotate",
                        "description": "Rotates the texture coordinates (degrees).",
                        "type": "float",
                        "defaultValue": 0.0,
                        "min": -180.0,
                        "max": 180.0,
                        "step": 1.0
                    },
                    {
                        "name": "scale",
                        "displayName": "Scale",
                        "description": "Scales texture coordinates in both U and V.",
                        "type": "float",
                        "defaultValue": 1.0,
                        "step": 0.1
                    }
                ]
            },
            {
                "name": "anisotropy",
                "displayName": "Anisotropic Material Response",
                "description": "How much is this material response anisotropic.",
                "properties": [
                    {
                        "name": "enableAnisotropy",
                        "displayName": "Enable Anisotropy",
                        "description": "Enable anisotropic surface response for non uniform reflection along the axis",
                        "type": "Bool",
                        "defaultValue": false,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_enableAnisotropy"
                        }
                    },
                    {
                        "name": "factor",
                        "displayName": "Anisotropy Factor",
                        "description": "Strength factor for the anisotropy: negative = along v, positive = along u",
                        "type": "Float",
                        "defaultValue": 0.0,
                        "min": -0.95,
                        "max": 0.95,
                        "connection": {
                            "type": "ShaderInput",
                            "name": "m_anisotropicFactor"
                        }
                    },
                    {
                        "name": "anisotropyAngle",
                        "displayName": "Anisotropy Angle",
                        "description": "Anisotropy direction of major reflection axis: 0 = 0 degrees, 1.0 = 180 degrees",
                        "type": "Float",
                        "defaultValue": 0.0,
                        "min": 0.0,
                        "max": 1.0,
                        "connection": {
                            "type": "ShaderInput",
                            "name": "m_anisotropicAngle"
                        }
                    }
                ]
            },
            {
                "$import":  "MaterialInputs/OcclusionProperties.json"
            },
            {
                "$import":  "MaterialInputs/EmissiveProperties.json"
            },
            {
                "$import":  "MaterialInputs/SubsurfaceProperties.json"
            },
            {
                "$import":  "MaterialInputs/ClearCoatProperties.json"
            },
            {
                "$import":  "MaterialInputs/ParallaxProperties.json"
            },
            {
                "$import":  "MaterialInputs/AlphaProperties.json"
            },
            {
                "$import":  "MaterialInputs/UvProperties.json"
            },
            {
                "$import":  "MaterialInputs/IrradianceProperties.json"
            },
            {
                "name": "general",
                "displayName": "General Settings",
                "description": "General settings.",
                "properties": [
                    {
                        "name": "applySpecularAA",
                        "displayName": "Apply Specular AA",
                        "description": "Whether to apply specular anti-aliasing in the shader.",
                        "type": "Bool",
                        "defaultValue": false,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_applySpecularAA"
                        }
                    },
                    {
                        "name": "enableShadows",
                        "displayName": "Enable Shadows",
                        "description": "Whether to use the shadow maps.",
                        "type": "Bool",
                        "defaultValue": true,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_enableShadows"
                        }
                    },
                    {
                        "name": "enableDirectionalLights",
                        "displayName": "Enable Directional Lights",
                        "description": "Whether to use directional lights.",
                        "type": "Bool",
                        "defaultValue": true,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_enableDirectionalLights"
                        }
                    },
                    {
                        "name": "enablePunctualLights",
                        "displayName": "Enable Punctual Lights",
                        "description": "Whether to use punctual lights.",
                        "type": "Bool",
                        "defaultValue": true,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_enablePunctualLights"
                        }
                    },
                    {
                        "name": "enableAreaLights",
                        "displayName": "Enable Area Lights",
                        "description": "Whether to use area lights.",
                        "type": "Bool",
                        "defaultValue": true,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_enableAreaLights"
                        }
                    },
                    {
                        "name": "enableIBL",
                        "displayName": "Enable IBL",
                        "description": "Whether to use Image Based Lighting (IBL).",
                        "type": "Bool",
                        "defaultValue": true,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_enableIBL"
                        }
                    },
                    {
                        "name": "forwardPassIBLSpecular",
                        "displayName": "Forward Pass IBL Specular",
                        "description": "Whether to apply IBL specular in the forward pass.",
                        "type": "Bool",
                        "defaultValue": false,
                        "connection": {
                            "type": "ShaderOption",
                            "name": "o_materialUseForwardPassIBLSpecular"
                        }
                    }
                ]
            }
        ]
    },
    "shaders": [
        {
            "file": "./EnhancedPBR_ForwardPass.shader",
            "tag": "ForwardPass"
        },
        {
            "file": "./EnhancedPBR_ForwardPass_EDS.shader",
            "tag": "ForwardPass_EDS"
        },
        {
            "file": "Shaders/Shadow/Shadowmap.shader",
            "tag": "Shadowmap"
        },
        {
            "file": "./EnhancedPBR_Shadowmap_WithPS.shader",
            "tag": "Shadowmap_WithPS"
        },
        {
            "file": "Shaders/Depth/DepthPass.shader",
            "tag": "DepthPass"
        },
        {
            "file": "./EnhancedPBR_DepthPass_WithPS.shader",
            "tag": "DepthPass_WithPS"
        },
        {
            "file": "Shaders/MotionVector/MeshMotionVector.shader",
            "tag": "MeshMotionVector"
        },
        // Used by the light culling system to produce accurate depth bounds for this object when it uses blended transparency
        {
            "file": "Shaders/Depth/DepthPassTransparentMin.shader",
            "tag": "DepthPassTransparentMin"
        },
        {
            "file": "Shaders/Depth/DepthPassTransparentMax.shader",
            "tag": "DepthPassTransparentMax"
        }        
    ],
    "functors": [
        {
            // Maps 2D scale, offset, and rotate properties into a float3x3 transform matrix.
            "type": "Transform2D",
            "args": {
                "transformOrder": [ "Rotate", "Translate", "Scale" ],
                "centerProperty": "uv.center",
                "scaleProperty": "uv.scale",
                "scaleXProperty": "uv.tileU",
                "scaleYProperty": "uv.tileV",
                "translateXProperty": "uv.offsetU",
                "translateYProperty": "uv.offsetV",
                "rotateDegreesProperty": "uv.rotateDegrees",
                "float3x3ShaderInput": "m_uvMatrix",
                "float3x3InverseShaderInput": "m_uvMatrixInverse"
            }
        },
        {
            // Maps 2D scale, offset, and rotate properties into a float3x3 transform matrix.
            "type": "Transform2D",
            "args": {
                "transformOrder": [ "Rotate", "Translate", "Scale" ],
                "centerProperty": "detailUV.center",
                "scaleProperty": "detailUV.scale",
                "scaleXProperty": "detailUV.tileU",
                "scaleYProperty": "detailUV.tileV",
                "translateXProperty": "detailUV.offsetU",
                "translateYProperty": "detailUV.offsetV",
                "rotateDegreesProperty": "detailUV.rotateDegrees",
                "float3x3ShaderInput": "m_detailUvMatrix",
                "float3x3InverseShaderInput": "m_detailUvMatrixInverse"
            }
        },
        {
            // Convert emissive unit.
            "type": "ConvertEmissiveUnit",
            "args": {
                "intensityProperty": "emissive.intensity",
                "lightUnitProperty": "emissive.unit",
                "shaderInput": "m_emissiveIntensity",
                "ev100Index": 0,
                "nitIndex" : 1,
                "ev100MinMax": [-10, 20],
                "nitMinMax": [0.001, 100000.0]
            }
        },
        {
            // Preprocess & build parameter set for subsurface scattering and translucency
            "type": "HandleSubsurfaceScatteringParameters",
            "args": {
                "mode": "subsurfaceScattering.transmissionMode",
                "scale": "subsurfaceScattering.transmissionScale",
                "power": "subsurfaceScattering.transmissionPower",
                "distortion": "subsurfaceScattering.transmissionDistortion",
                "attenuation": "subsurfaceScattering.transmissionAttenuation",
                "tintColor": "subsurfaceScattering.transmissionTint",
                "thickness": "subsurfaceScattering.thickness",
                "enabled": "subsurfaceScattering.enableSubsurfaceScattering",
                "scatterDistanceColor": "subsurfaceScattering.scatterColor",
                "scatterDistanceIntensity": "subsurfaceScattering.scatterDistance",
                "scatterDistanceShaderInput": "m_scatterDistance",
                "parametersShaderInput": "m_transmissionParams",
                "tintThickenssShaderInput": "m_transmissionTintThickness"
            }
        },
        {
            "type": "UseTexture",
            "args": {
                "textureProperty": "baseColor.textureMap",
                "useTextureProperty": "baseColor.useTexture",
                "dependentProperties": ["baseColor.textureMapUv", "baseColor.textureBlendMode"],
                "shaderOption": "o_baseColor_useTexture"
            }
        },
        {
            "type": "UseTexture",
            "args": {
                "textureProperty": "metallic.textureMap",
                "useTextureProperty": "metallic.useTexture",
                "dependentProperties": ["metallic.textureMapUv"],
                "shaderOption": "o_metallic_useTexture"
            }
        },
        {
            "type": "UseTexture",
            "args": {
                "textureProperty": "specularF0.textureMap",
                "useTextureProperty": "specularF0.useTexture",
                "dependentProperties": ["specularF0.textureMapUv"],
                "shaderOption": "o_specularF0_useTexture"
            }
        },
        {
            "type": "UseTexture",
            "args": {
                "textureProperty": "normal.textureMap",
                "useTextureProperty": "normal.useTexture",
                "dependentProperties": ["normal.textureMapUv", "normal.factor", "normal.flipX", "normal.flipY"],
                "shaderOption": "o_normal_useTexture"    
            }
        },
        {
            "type": "UseTexture",
            "args": {
                "textureProperty": "occlusion.diffuseTextureMap",
                "useTextureProperty": "occlusion.diffuseUseTexture",
                "dependentProperties": ["occlusion.diffuseTextureMapUv", "occlusion.diffuseFactor"],
                "shaderOption": "o_diffuseOcclusion_useTexture"    
            }
        },
        {
            "type": "UseTexture",
            "args": {
                "textureProperty": "occlusion.specularTextureMap",
                "useTextureProperty": "occlusion.specularUseTexture",
                "dependentProperties": ["occlusion.specularTextureMapUv", "occlusion.specularFactor"],
                "shaderOption": "o_specularOcclusion_useTexture"    
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_ClearCoatState.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_ClearCoatEnableFeature.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_EmissiveState.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_ParallaxState.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_Roughness.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "EnhancedPBR_SubsurfaceState.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_HandleOpacityDoubleSided.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_HandleOpacityMode.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "MaterialInputs/DetailMapsCommonFunctor.lua"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_ShaderEnable.lua"
            }
        }
    ],
    "uvNameMap": {
        "UV0": "Tiled",
        "UV1": "Unwrapped"
    }
}
