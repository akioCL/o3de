/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once 

#include <Atom/Features/SrgSemantics.azsli>
#include <viewsrg.srgi>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

#include "MaterialInputs/BaseColorInput.azsli"
#include "MaterialInputs/RoughnessInput.azsli"
#include "MaterialInputs/MetallicInput.azsli"
#include "MaterialInputs/SpecularInput.azsli"
#include "MaterialInputs/NormalInput.azsli"
#include "MaterialInputs/ClearCoatInput.azsli"
#include "MaterialInputs/OcclusionInput.azsli"
#include "MaterialInputs/EmissiveInput.azsli"
#include "MaterialInputs/ParallaxInput.azsli"
#include "MaterialInputs/UvSetCount.azsli"

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    // Auto-generate material SRG fields for common inputs
    COMMON_SRG_INPUTS_BASE_COLOR()
    COMMON_SRG_INPUTS_ROUGHNESS()
    COMMON_SRG_INPUTS_METALLIC()
    COMMON_SRG_INPUTS_SPECULAR_F0()
    COMMON_SRG_INPUTS_NORMAL()
    COMMON_SRG_INPUTS_CLEAR_COAT()
    COMMON_SRG_INPUTS_OCCLUSION()     
    COMMON_SRG_INPUTS_EMISSIVE()      
    COMMON_SRG_INPUTS_PARALLAX()
    
    uint m_parallaxUvIndex;
    float m_parallax_pdo_shadowFactor;

    float3x3 m_uvMatrix;
    float4 m_pad1; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.
    float3x3 m_uvMatrixInverse;
    float4 m_pad2; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.

    float m_opacityFactor;
    float m_opacityAffectsSpecularFactor;
    Texture2D m_opacityMap;
    uint m_opacityMapUvIndex;

    // Detail bending parameters
    float m_detailFreq;
    float m_detailLeafAmp;
    float m_detailBranchAmp;

    // Wind for bending
    float m_windDirX;
    float m_windDirY;
    float m_bendingStrength;

    Sampler m_sampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        MaxAnisotropy = 16;
    };

    Texture2D m_brdfMap;

    Sampler m_samplerBrdf
    {
        AddressU = Clamp;
        AddressV = Clamp;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };
}

// Callback function for ParallaxMapping.azsli
DepthResult GetDepth(float2 uv, float2 uv_ddx, float2 uv_ddy)
{
    return SampleDepthFromHeightmap(MaterialSrg::m_heightmap, MaterialSrg::m_sampler, uv, uv_ddx, uv_ddy);
}


COMMON_OPTIONS_PARALLAX()

bool ShouldHandleParallax()
{
    // Parallax mapping's non uniform uv transformations break screen space subsurface scattering, disable it when subsurface scattering is enabled.
    return !o_enableSubsurfaceScattering && o_parallax_feature_enabled && o_useHeightmap;
}

bool ShouldHandleParallaxInDepthShaders()
{
    // The depth pass shaders need to calculate parallax when the result could affect the depth buffer, or when
    // parallax could affect texel clipping.
    return ShouldHandleParallax() && (o_parallax_enablePixelDepthOffset || o_opacity_mode == OpacityMode::Cutout);
}

float4 setUpWindBending(float currentTime, float4 worldPosition) {

    float2 wind = float2(MaterialSrg::m_windDirX, MaterialSrg::m_windDirY);
    float bendStr = MaterialSrg::m_bendingStrength;
    float2 amp = float2(wind.x * 0.4 + wind.y * 0.2, wind.y * 0.4 - wind.x * 0.2);
    float2 freq = float2(0.8, 0.8 * 1.125);
    float2 phase = float2(worldPosition.x * 0.08, worldPosition.y * 0.08);

    float2 addBending = float2(sin(currentTime * freq.x + phase.x) * amp.x, sin(currentTime * freq.y + phase.y) * amp.y);

    float4 result;
    result.x = addBending.x + wind.x;
    result.y = addBending.y + wind.y;
    result.z = sqrt(wind.x * wind.x + wind.y * wind.y);
    result *= bendStr * 0.08;
    float2 totalBending = addBending + wind;
    result.w = sqrt(totalBending.x * totalBending.x + totalBending.y * totalBending.y) * 0.3;

    return result;
}

float3 detailBending(float3 position, float3 normal, float4 color, float currentTime, float4 worldPosition, float bendLength) {
    // The information from the vertex colors about how to bend this vertex.
    float edgeInfo = color.x;
    float branchPhase = color.y;
    float branchBendAmount = color.z;

    // Phases (object, vertex, branch)
    float objPhase = (dot(worldPosition.xyz, 2.0)); 
    branchPhase += objPhase;
    float vtxPhase = (dot(position, branchPhase)); 

    // Detail bending for leaves
    // x: is used for leaves, y is used for branch
    float2 wavesIn = currentTime;
    wavesIn += float2(vtxPhase, branchPhase);
    float4 waves = (frac(wavesIn.xxyy * float4(1.975, 0.793, 0.375,  0.193)) * 2.0 - 1.0) * MaterialSrg::m_detailFreq * bendLength;
    waves = abs(frac(waves + 0.5) * 2.0 - 1.0);

    // x: is used for leaves, y is used for branches
    float2 wavesSum = ((waves.xz + waves.yw));

    // Leaf and branch bending (xy is used for leaves, z for branches)
    return position + (wavesSum.xxy * float3(edgeInfo * MaterialSrg::m_detailLeafAmp * normal.xy, branchBendAmount * MaterialSrg::m_detailBranchAmp));
}

float3 mainBending(float3 position, float4 bending) {
    float bendFactor = position.z * bending.z;
    bendFactor *= bendFactor; 

    float len = length(position); 

    float3 newPos = position;
    newPos.xy += float2(bending.x, bending.y) * bendFactor;

    return normalize(newPos) * len;
}
