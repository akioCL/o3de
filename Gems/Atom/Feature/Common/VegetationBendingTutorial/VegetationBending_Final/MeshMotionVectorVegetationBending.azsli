/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

option bool o_color_isBound;

struct VSInput
{
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;

    float4 m_optional_color : COLOR0;
};

struct VSOutput
{
    float4 m_position : SV_Position;
    float3 m_worldPos : TEXCOORD0;
    float3 m_worldPosPrev: TEXCOORD1;
};

struct PSOutput
{
    float2 m_motion : SV_Target0;
};

VSOutput MainVS(VSInput IN)
{
    VSOutput OUT;
    
    float4x4 objectToWorld = SceneSrg::GetObjectToWorldMatrix(ObjectSrg::m_objectId);
    float4 worldPosition = mul(objectToWorld, float4(IN.m_position, 1.0));
    
    float4x4 prevObjectToWorld = SceneSrg::GetObjectToWorldMatrixPrev(ObjectSrg::m_objectId);
    float4 prevWorldPosition = mul(prevObjectToWorld, float4(IN.m_position, 1.0));

    // Bending
    if (o_color_isBound) {
      float currentTime = SceneSrg::m_time;
      float prevTime = SceneSrg::m_prevTime;

      // Overall wind
      float4 currentBending = setUpWindBending(currentTime, worldPosition);
      float4 prevBending = setUpWindBending(prevTime, prevWorldPosition);

      // Detail bending
      float3 currentOutPosition = detailBending(IN.m_position, IN.m_normal, IN.m_optional_color, currentTime, worldPosition, currentBending.w);
      float3 prevOutPosition = detailBending(IN.m_position, IN.m_normal, IN.m_optional_color, prevTime, prevWorldPosition, prevBending.w);

      // Main bending
      OUT.m_position.xyz = mainBending(currentOutPosition, currentBending);
      float3 prevPosition = mainBending(prevOutPosition, prevBending);

      worldPosition = mul(objectToWorld, float4(OUT.m_position.xyz, 1.0));
      prevWorldPosition = mul(prevObjectToWorld, float4(prevPosition, 1.0));
   }

    OUT.m_worldPos = worldPosition.xyz;
    OUT.m_worldPosPrev = prevWorldPosition.xyz;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    return OUT;
}

PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;

    // Current clip position
    float4 clipPos = mul(ViewSrg::m_viewProjectionMatrix, float4(IN.m_worldPos, 1.0));
    
    // Reprojected last frame's clip position, for skinned mesh it also implies last key frame
    float4 clipPosPrev = mul(ViewSrg::m_viewProjectionPrevMatrix, float4(IN.m_worldPosPrev, 1.0));

    float2 motion = (clipPos.xy / clipPos.w - clipPosPrev.xy / clipPosPrev.w) * 10000.0;

    OUT.m_motion = motion;
    
    // Flip y to line up with uv coordinates
    OUT.m_motion.y = -OUT.m_motion.y;

    return OUT;
}
